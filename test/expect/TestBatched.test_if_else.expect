graph(%a.1_data : Dynamic
      %a.1_mask : Dynamic
      %a.1_dims : Dynamic
      %b_data : Dynamic
      %b_mask : Dynamic
      %b_dims : Dynamic) {
  %6 : Dynamic = aten::gt(%a.1_data, %b_data)
  %7 : Dynamic = aten::mul(%a.1_mask, %b_mask)
  %8 : int = prim::Constant[value=1]()
  %9 : Long() = prim::NumToTensor(%8)
  %alpha.1 : float = prim::TensorToNum(%9)
  %data.1 : Dynamic = aten::add(%a.1_data, %b_data, %alpha.1)
  %mask.1 : Dynamic = aten::mul(%a.1_mask, %b_mask)
  %dims.1 : Dynamic = aten::__or__(%a.1_dims, %b_dims)
  %14 : int = prim::Constant[value=1]()
  %15 : Long() = prim::NumToTensor(%14)
  %alpha : float = prim::TensorToNum(%15)
  %data.4 : Dynamic = aten::sub(%a.1_data, %b_data, %alpha)
  %mask : Dynamic = aten::mul(%a.1_mask, %b_mask)
  %dims : Dynamic = aten::__or__(%a.1_dims, %b_dims)
  %20 : Dynamic = aten::type_as(%7, %6)
  %cond_mask.1 : Dynamic = aten::mul(%6, %20)
  %22 : int = aten::dim(%cond_mask.1)
  %23 : int = prim::Constant[value=1]()
  %24 : int = aten::eq(%22, %23)
  %cond_data : Dynamic, %cond_mask : Dynamic, %data : Dynamic = prim::If(%24)
    block0() {
      %28 : int = aten::dim(%data.1)
      %29 : int = prim::Constant[value=1]()
      %30 : int = aten::sub(%28, %29)
      %31 : int = prim::Constant[value=1]()
      %data.3 : Dynamic = prim::Loop(%30, %31, %cond_mask.1)
        block0(%_ : int, %34 : Dynamic) {
          %35 : int = aten::dim(%34)
          %data.2 : Dynamic = aten::unsqueeze(%34, %35)
          %37 : int = prim::Constant[value=1]()
          -> (%37, %data.2)
        }
      %cond_data.1 : Dynamic = aten::expand_as(%data.3, %data.1)
      %cond_mask.2 : Dynamic = aten::expand_as(%data.3, %mask.1)
      -> (%cond_data.1, %cond_mask.2, %data.3)
    }
    block1() {
      -> (%cond_mask.1, %cond_mask.1, %cond_mask.1)
    }
  %res_data : Dynamic = aten::where(%cond_data, %data.1, %data.4)
  %res_mask : Dynamic = aten::where(%cond_mask, %mask.1, %mask)
  %res_dims : Dynamic = aten::__or__(%dims.1, %dims)
  return (%res_data, %res_mask, %res_dims);
}
